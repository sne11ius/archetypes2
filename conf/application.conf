## Akka
akka {
  log-config-on-start = true
}

## Secret key
play.crypto.secret = "changeme"

## Modules
play.modules {
  #enabled += my.application.Module
  #disabled += ""
}

## Internationalisation
play.i18n {
  langs = [ "en" ]
  langCookieSecure = true
  langCookieHttpOnly = true
}

## Play HTTP settings
play.http {
  #router = my.application.Router

  #actionCreator = null

  #errorHandler = null

  ## Filters
  #filters = my.application.Filters

  ## Session & Flash
  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    httpOnly = true

    # Sets the domain on the session cookie.
    #domain = "example.com"
  }

  flash {
    #secure = true
    httpOnly = true
  }
}

play.server.netty {
  #log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  #transport = "native"
}

## WS (HTTP Client)
play.ws {
  #followRedirects = false
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  ssl {
    debug.handshake = true
  }
}

## Cache
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

## Filters
play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    frameOptions = "DENY"
    xssProtection = "1; mode=block"
    contentTypeOptions = "nosniff"
    permittedCrossDomainPolicies = "master-only"
    contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
  }
}

## Evolutions
play.evolutions {
  #db.default.enabled = false
}

## Database Connection Pool
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

## JDBC Datasource
db {
  slick.dbs.default.driver = "slick.driver.MySQLDriver$"
  slick.dbs.default.db.driver = "com.mysql.jdbc.Driver"
  slick.dbs.default.db.url = "jdbc:mysql://localhost/archetypes"
  slick.dbs.default.db.user = "archetypes-user"
  slick.dbs.default.db.password = "archetypes-user"
  
  default.logSql=true
}
